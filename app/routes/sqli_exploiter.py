from flask import Blueprint, render_template, request, jsonify, send_file
from flask_login import login_required
import paramiko
from fpdf import FPDF
import tempfile
import os
from app.utils.ai_crawler import crawl_site_static, extract_forms_bs4
import requests

sqli_exploiter_bp = Blueprint('sqli_exploiter', __name__)

# SSH Configuration
KALI_HOST = "192.168.1.54"
KALI_PORT = 22
KALI_USERNAME = "kali"
KALI_PASSWORD = "kali"

def run_sqlmap(target, options):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(KALI_HOST, KALI_PORT, KALI_USERNAME, KALI_PASSWORD)

        # Build sqlmap command
        cmd = ["sqlmap", "-u", f"'{target}'"]
        if options.get("batch"): cmd.append("--batch")
        if options.get("dbs"): cmd.append("--dbs")
        if options.get("tables"): cmd.append("--tables")
        if options.get("dump"): cmd.append("--dump")
        if options.get("os_shell"): cmd.append("--os-shell")
        command = " ".join(cmd)

        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode(errors='ignore')
        error = stderr.read().decode(errors='ignore')
        ssh.close()
        return output if output else error
    except Exception as e:
        return f"Error: {str(e)}"

def run_sqlmap_stepwise(target, options):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(KALI_HOST, KALI_PORT, KALI_USERNAME, KALI_PASSWORD)

        # Step 1: Test for injection
        base_cmd = f"sqlmap -u '{target}' --batch --flush-session"
        stdin, stdout, stderr = ssh.exec_command(base_cmd)
        base_output = stdout.read().decode(errors='ignore')
        base_error = stderr.read().decode(errors='ignore')
        raw_output = base_output + base_error

        injectable = True
        if ("do not appear to be injectable" in raw_output) or ("all tested parameters do not appear to be injectable" in raw_output):
            injectable = False

        results = {
            "injectable": injectable,
            "raw_output": raw_output,
            "messages": {},
        }

        if not injectable:
            results["messages"]["info"] = (
                "No SQL injection point found. Try increasing --level/--risk or using --tamper scripts. "
                "See sqlmap output for details."
            )
            ssh.close()
            return results

        # Step 2: For each selected option, run the command and collect output
        option_map = {
            "dbs": "--dbs",
            "tables": "--tables",
            "dump": "--dump",
            "os_shell": "--os-shell"
        }
        for opt, flag in option_map.items():
            if options.get(opt):
                cmd = f"sqlmap -u '{target}' --batch {flag} --flush-session"
                stdin, stdout, stderr = ssh.exec_command(cmd)
                out = stdout.read().decode(errors='ignore')
                err = stderr.read().decode(errors='ignore')
                results["messages"][opt] = out + err
        ssh.close()
        return results
    except Exception as e:
        return {"injectable": False, "raw_output": f"Error: {str(e)}", "messages": {"error": str(e)}}

@sqli_exploiter_bp.route('/sqli-exploiter')
@login_required
def sqli_exploiter():
    return render_template('sqli_exploiter.html')

@sqli_exploiter_bp.route('/api/sqli-exploiter', methods=['POST'])
@login_required
def api_sqli_exploiter():
    data = request.get_json()
    target = data.get('target')
    options = data.get('options', {})
    if not target:
        return jsonify({"error": "Target URL is required"}), 400
    result = run_sqlmap_stepwise(target, options)
    if "error" in result.get("messages", {}):
        return jsonify({"error": result["messages"]["error"]}), 500
    return jsonify(result)

@sqli_exploiter_bp.route('/api/sqli-exploiter/pdf', methods=['POST'])
@login_required
def sqli_exploiter_pdf():
    data = request.get_json()
    target = data.get('target', 'Unknown')
    options = data.get('options', {})
    sqlmap = data.get('sqlmap', '')

    class BlackBGFPDF(FPDF):
        def header(self):
            self.set_fill_color(0, 0, 0)
            self.rect(0, 0, 210, 297, 'F')
            if hasattr(self, 'logo_path') and os.path.exists(self.logo_path):
                self.image(self.logo_path, x=10, y=8, w=18)
            self.set_xy(30, 10)
            self.set_font("Courier", 'B', 16)
            self.set_text_color(0, 255, 0)
            self.cell(0, 10, "Pento", ln=1, align='L')
            self.set_y(25)

    pdf = BlackBGFPDF()
    pdf.logo_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'static', 'images', 'hacker_logo.png'))
    pdf.add_page()

    # Title
    pdf.set_font("Courier", 'B', 18)
    pdf.set_text_color(0, 255, 0)
    pdf.cell(0, 12, "SQLi Exploiter Report", ln=True, align='C')
    pdf.ln(6)

    # Target
    pdf.set_font("Courier", 'B', 12)
    pdf.set_text_color(0, 255, 0)
    pdf.cell(35, 10, "Target:", ln=0)
    pdf.set_text_color(255, 255, 255)
    pdf.set_font("Courier", '', 12)
    pdf.cell(0, 10, f"{target}", ln=1)
    pdf.ln(4)

    # Options
    pdf.set_font("Courier", 'B', 13)
    pdf.set_text_color(0, 255, 0)
    pdf.cell(0, 10, "Options:", ln=1)
    pdf.set_font("Courier", '', 11)
    pdf.set_text_color(255, 255, 255)
    for k, v in options.items():
        if v:
            pdf.cell(0, 8, f"- {k}", ln=1)
    pdf.ln(2)

    # SQLMap Output
    pdf.set_font("Courier", 'B', 13)
    pdf.set_text_color(0, 255, 0)
    pdf.cell(0, 10, "SQLMap Output:", ln=1)
    pdf.set_font("Courier", '', 9)
    pdf.set_text_color(255, 255, 255)
    for line in sqlmap.splitlines():
        pdf.cell(0, 6, line, ln=1)

    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
        pdf.output(tmp.name)
        tmp_path = tmp.name

    return send_file(tmp_path, as_attachment=True, download_name="sqli_exploiter_report.pdf")

@sqli_exploiter_bp.route('/api/sqli-exploiter/suggestions', methods=['POST'])
@login_required
def sqli_exploiter_suggestions():
    data = request.get_json()
    base_url = data.get('base_url')
    if not base_url:
        return jsonify({'error': 'Base URL is required'}), 400
    try:
        endpoints = crawl_site_static(base_url, limit=10)
        suggestions = []
        for url in endpoints:
            try:
                r = requests.get(url, timeout=8)
                forms = extract_forms_bs4(r.text, url)
                for form in forms:
                    # Suggest the action URL with a sample parameter if possible
                    if form['inputs']:
                        param = form['inputs'][0]
                        suggestion_url = f"{form['action']}?{param}=1"
                        suggestions.append({
                            'url': suggestion_url,
                            'param': param,
                            'action': form['action'],
                            'inputs': form['inputs'],
                            'method': form['method']
                        })
            except Exception as e:
                continue
        # Also suggest endpoints with common parameters if no forms found
        if not suggestions:
            common_params = ['id', 'cat', 'item', 'product', 'user', 'page']
            for url in endpoints:
                for param in common_params:
                    suggestions.append({
                        'url': f"{url}?{param}=1",
                        'param': param,
                        'action': url,
                        'inputs': [param],
                        'method': 'get'
                    })
        return jsonify({'suggestions': suggestions[:10]})
    except Exception as e:
        return jsonify({'error': str(e)}), 500 