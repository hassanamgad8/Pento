export function initSqliExploiter() {
    const form = document.getElementById('sqli-exploiter-form');
    const resultsDiv = document.getElementById('sqli-results');
    const sqlmapOutput = document.getElementById('sqlmap-output');
    const errorMessage = document.getElementById('sqli-error-message');
    const pdfBtn = document.getElementById('pdf-sqli-btn');
    const suggestionsDiv = document.getElementById('sqli-suggestions');
    const targetInput = document.getElementById('target');

    if (!form) {
        console.error('SQLi exploiter form not found');
        return;
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        resultsDiv.classList.add('hidden');
        errorMessage.classList.add('hidden');
        if (pdfBtn) pdfBtn.style.display = 'none';
        sqlmapOutput.textContent = '';

        const target = document.getElementById('target').value;
        const options = {
            batch: document.getElementById('batch').checked,
            dbs: document.getElementById('dbs').checked,
            tables: document.getElementById('tables').checked,
            dump: document.getElementById('dump').checked,
            os_shell: document.getElementById('os_shell').checked
        };
        try {
            const submitButton = form.querySelector('button[type="submit"]');
            submitButton.textContent = 'Scanning...';
            submitButton.disabled = true;

            const response = await fetch('/api/sqli-exploiter', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ target, options })
            });
            const data = await response.json();
            if (response.ok) {
                let html = '';
                if (!data.injectable) {
                    html += `<div style='color:#ff4444; font-family:monospace; margin-bottom:1em;'><b>Not injectable:</b> ${data.messages.info || 'No injection point found.'}</div>`;
                    html += `<details><summary style='color:#0f0;'>Show sqlmap output</summary><pre style='color:#0f0; background:#111; border:1px solid #0f0; border-radius:6px; padding:1em;'>${data.raw_output}</pre></details>`;
                    sqlmapOutput.innerHTML = html;
                    resultsDiv.classList.remove('hidden');
                    if (pdfBtn) pdfBtn.style.display = 'none';
                } else {
                    html += `<div style='color:#00ff00; font-family:monospace; margin-bottom:1em;'><b>Injection found!</b> Proceeding with selected options.</div>`;
                    const optNames = { dbs: 'Enumerate DBs', tables: 'Enumerate Tables', dump: 'Dump Data', os_shell: 'OS Shell' };
                    let hasResults = false;
                    for (const opt of ['dbs','tables','dump','os_shell']) {
                        if (options[opt]) {
                            hasResults = true;
                            html += `<div style='margin-bottom:1em;'><b style='color:#0f0;'>${optNames[opt]}</b><pre style='color:#0f0; background:#111; border:1px solid #0f0; border-radius:6px; padding:1em; margin-top:0.5em;'>${data.messages[opt] ? data.messages[opt] : 'No output.'}</pre></div>`;
                        }
                    }
                    if (!hasResults) {
                        html += `<div style='color:#888;'>No advanced options selected. Only injection test was performed.</div>`;
                    }
                    sqlmapOutput.innerHTML = html;
                    resultsDiv.classList.remove('hidden');
                    if (pdfBtn) pdfBtn.style.display = hasResults ? '' : 'none';
                }
            } else {
                errorMessage.textContent = data.error || 'An error occurred during the scan';
                errorMessage.classList.remove('hidden');
            }
        } catch (error) {
            errorMessage.textContent = 'Failed to connect to the server';
            errorMessage.classList.remove('hidden');
            console.error('Scan error:', error);
        } finally {
            const submitButton = form.querySelector('button[type="submit"]');
            submitButton.textContent = 'Start Scan';
            submitButton.disabled = false;
        }
    });

    if (pdfBtn) {
        pdfBtn.addEventListener('click', async function () {
            const target = document.getElementById('target').value;
            const options = {
                batch: document.getElementById('batch').checked,
                dbs: document.getElementById('dbs').checked,
                tables: document.getElementById('tables').checked,
                dump: document.getElementById('dump').checked,
                os_shell: document.getElementById('os_shell').checked
            };
            const sqlmap = sqlmapOutput.textContent;

            pdfBtn.textContent = "Generating PDF...";
            pdfBtn.disabled = true;

            const response = await fetch('/api/sqli-exploiter/pdf', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ target, options, sqlmap })
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = "sqli_exploiter_report.pdf";
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
            } else {
                alert("Failed to generate PDF report.");
            }

            pdfBtn.textContent = "PDF Report";
            pdfBtn.disabled = false;
        });
    }

    // Suggestion logic: when the target input loses focus or changes
    async function fetchSuggestionsIfNeeded() {
        const url = targetInput.value.trim();
        if (!url || url.includes('?')) {
            suggestionsDiv.innerHTML = '';
            return;
        }
        suggestionsDiv.innerHTML = '<span style="color:#0f0;font-family:monospace;">Searching for possible endpoints and parameters...</span>';
        try {
            const res = await fetch('/api/sqli-exploiter/suggestions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ base_url: url })
            });
            const data = await res.json();
            if (data.suggestions && data.suggestions.length > 0) {
                let html = '<div style="color:#0f0;font-family:monospace;margin-bottom:0.5em;">Try scanning one of these discovered endpoints/parameters:</div>';
                html += '<div style="display:flex;flex-direction:column;gap:0.5em;">';
                data.suggestions.forEach(s => {
                    html += `<button type="button" class="green-button" style="text-align:left;font-family:monospace;overflow-x:auto;" data-url="${s.url}">${s.url}</button>`;
                });
                html += '</div>';
                suggestionsDiv.innerHTML = html;
                // Add click listeners
                Array.from(suggestionsDiv.querySelectorAll('button[data-url]')).forEach(btn => {
                    btn.addEventListener('click', () => {
                        targetInput.value = btn.getAttribute('data-url');
                        suggestionsDiv.innerHTML = '';
                        form.dispatchEvent(new Event('submit', { cancelable: true }));
                    });
                });
            } else {
                suggestionsDiv.innerHTML = '<span style="color:#888;font-family:monospace;">No endpoints/parameters found. Try increasing scan depth or using advanced options.</span>';
            }
        } catch (e) {
            suggestionsDiv.innerHTML = '<span style="color:#f44;font-family:monospace;">Failed to fetch suggestions.</span>';
        }
    }

    targetInput.addEventListener('blur', fetchSuggestionsIfNeeded);
    targetInput.addEventListener('change', fetchSuggestionsIfNeeded);
} 