{"id": "1747442727-http-testphp.vulnweb.com-", "url": "http://testphp.vulnweb.com/", "timestamp": 1747442727, "options": {"spider": true, "ajax": true, "active": false}, "status": "completed", "progress": 100, "spider_id": "0", "reports": {"html": "/static/reports\\zap_report_20250517_034527.html", "pdf": "/static/reports\\zap_report_20250517_034527.pdf", "json": "/static/reports\\zap_alerts_1747442727-http-testphp.vulnweb.com-.json"}, "alerts": [{"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10020", "cweid": "1021", "confidence": "Medium", "sourceMessageId": 1, "wascid": "15", "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html", "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options", "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.", "alert": "Missing Anti-clickjacking Header", "param": "x-frame-options", "attack": "", "name": "Missing Anti-clickjacking Header", "risk": "Medium", "id": "0", "alertRef": "10020-1"}, {"sourceid": "3", "other": "There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [iso-8859-2] do not match.", "method": "GET", "evidence": "", "pluginId": "90011", "cweid": "436", "confidence": "Low", "sourceMessageId": 1, "wascid": "15", "description": "This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.\n\nAn attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"CWE-436": "https://cwe.mitre.org/data/definitions/436.html"}, "reference": "https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection", "solution": "Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.", "alert": "Charset Mismatch (Header Versus Meta Content-Type Charset)", "param": "", "attack": "", "name": "Charset Mismatch (Header Versus Meta Content-Type Charset)", "risk": "Informational", "id": "1", "alertRef": "90011"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "sourceMessageId": 1, "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "CWE-693": "https://cwe.mitre.org/data/definitions/693.html", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.", "alert": "Content Security Policy (CSP) Header Not Set", "param": "", "attack": "", "name": "Content Security Policy (CSP) Header Not Set", "risk": "Medium", "id": "2", "alertRef": "10038-1"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"goButton\" \"searchFor\" ].", "method": "GET", "evidence": "<form action=\"search.php?test=query\" method=\"post\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "sourceMessageId": 1, "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html", "CWE-352": "https://cwe.mitre.org/data/definitions/352.html"}, "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\nhttps://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "3", "alertRef": "10202"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "nginx/1.19.0", "pluginId": "10036", "cweid": "497", "confidence": "High", "sourceMessageId": 1, "wascid": "13", "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html", "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server", "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"}, "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.", "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "param": "", "attack": "", "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field", "risk": "Low", "id": "4", "alertRef": "10036"}, {"sourceid": "3", "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.", "method": "GET", "evidence": "", "pluginId": "10021", "cweid": "693", "confidence": "Medium", "sourceMessageId": 1, "wascid": "15", "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "CWE-693": "https://cwe.mitre.org/data/definitions/693.html", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers", "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", "alert": "X-Content-Type-Options Header Missing", "param": "x-content-type-options", "attack": "", "name": "X-Content-Type-Options Header Missing", "risk": "Low", "id": "5", "alertRef": "10021"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "X-Powered-By: PHP/5.6.40-38+ubuntu20.04.1+deb.sury.org+1", "pluginId": "10037", "cweid": "497", "confidence": "Medium", "sourceMessageId": 1, "wascid": "13", "description": "The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-INFO-08": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html", "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"}, "reference": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework\nhttps://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.", "alert": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)", "param": "", "attack": "", "name": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)", "risk": "Low", "id": "6", "alertRef": "10037"}, {"sourceid": "4", "other": "The following CPE is associated with the identified tech: cpe:2.3:a:php:php:*:*:*:*:*:*:*:*\nThe following version(s) is/are associated with the identified tech: 5.6.40", "method": "GET", "evidence": "PHP/5.6.40", "pluginId": "10004", "cweid": "-1", "confidence": "Medium", "sourceMessageId": 1, "wascid": "13", "description": "The following \"Programming languages\" technology was identified: PHP.\nDescribed as:\nPHP is a general-purpose scripting language used for web development.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {}, "reference": "https://php.net", "solution": "", "alert": "Tech Detected - PHP", "param": "", "attack": "", "name": "Tech Detected - PHP", "risk": "Informational", "id": "7", "alertRef": "10004"}, {"sourceid": "4", "other": "The following CPE is associated with the identified tech: cpe:2.3:o:canonical:ubuntu_linux:*:*:*:*:*:*:*:*\n", "method": "GET", "evidence": "ubuntu", "pluginId": "10004", "cweid": "-1", "confidence": "Medium", "sourceMessageId": 1, "wascid": "13", "description": "The following \"Operating systems\" technology was identified: Ubuntu.\nDescribed as:\nUbuntu is a free and open-source operating system on Linux for the enterprise server, desktop, cloud, and IoT.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {}, "reference": "https://www.ubuntu.com/server", "solution": "", "alert": "Tech Detected - Ubuntu", "param": "", "attack": "", "name": "Tech Detected - Ubuntu", "risk": "Informational", "id": "8", "alertRef": "10004"}, {"sourceid": "4", "other": "The following CPE is associated with the identified tech: cpe:2.3:a:f5:nginx:*:*:*:*:*:*:*:*\nThe following version(s) is/are associated with the identified tech: 1.19.0", "method": "GET", "evidence": "nginx/1.19.0", "pluginId": "10004", "cweid": "-1", "confidence": "Medium", "sourceMessageId": 1, "wascid": "13", "description": "The following \"Web servers, Reverse proxies\" technology was identified: Nginx.\nDescribed as:\nNginx is a web server that can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {}, "reference": "https://nginx.org/en", "solution": "", "alert": "Tech Detected - Nginx", "param": "", "attack": "", "name": "Tech Detected - Nginx", "risk": "Informational", "id": "9", "alertRef": "10004"}, {"sourceid": "4", "other": "The following CPE is associated with the identified tech: cpe:2.3:a:adobe:flash:*:*:*:*:*:*:*:*\n", "method": "GET", "evidence": "", "pluginId": "10004", "cweid": "-1", "confidence": "Medium", "sourceMessageId": 1, "wascid": "13", "description": "The following \"Programming languages\" technology was identified: Adobe Flash.\nDescribed as:\nAdobe Flash is a multimedia software platform used for production of animations, rich web applications and embedded web browser video players.", "messageId": "1", "inputVector": "", "url": "http://testphp.vulnweb.com/", "tags": {}, "reference": "https://www.adobe.com/products/flashplayer", "solution": "", "alert": "Tech Detected - Adobe Flash", "param": "", "attack": "", "name": "Tech Detected - Adobe Flash", "risk": "Informational", "id": "10", "alertRef": "10004"}], "current_stage": "Completed"}